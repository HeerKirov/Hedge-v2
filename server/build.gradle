plugins {
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'com.github.johnrengelman.shadow' version "${shadowVersion}"
    id 'org.beryx.jlink' version "${jlinkVersion}"
}

group 'com.heerkirov.hedge.server'
version '0.1.0'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

mainClassName = "${projectMainModule}/${projectMainClass}"

application {
    mainClass.set(projectMainClass)
    mainModule.set(projectMainModule)
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: kotlinVersion
    implementation group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: kotlinVersion
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
    implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: jacksonVersion
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: sqliteVersion
    implementation group: 'me.liuwj.ktorm', name: 'ktorm-core', version: ktormVersion
    implementation group: 'me.liuwj.ktorm', name: 'ktorm-support-sqlite', version: ktormVersion
    implementation group: 'io.javalin', name: 'javalin', version: javalinVersion
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion
    implementation group: 'org.slf4j', name: 'slf4j-api', version: slf4jVersion
}

sourceSets {
    //使开发模式下的gradle能正确处理资源文件的位置，防止读取不到
    main.output.resourcesDir = main.java.outputDir
}

compileJava {
    doFirst {
        options.compilerArgs = ['--module-path', classpath.asPath]
    }
}
compileKotlin { kotlinOptions.jvmTarget = javaVersion }
compileTestKotlin { kotlinOptions.jvmTarget = javaVersion }

compileKotlin.destinationDir = compileJava.destinationDir

shadowJar {
    manifestContentCharset 'utf-8'
    metadataCharset 'utf-8'
    manifest {
        attributes 'Main-Class': projectMainClass
    }
}

jlink {
    options.set(['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages'])
    launcher {
        name = projectBinaryName
    }
    mergedModule {
        additive = true
        /* 存在一个jlink插件auto merge non-module代码时的问题。
         * 新的java版本采用uses在module中声明服务发现的implement。对于non-module的代码，jlink插件会自动把它们打包成一个merged-module。
         * 但是，kotlin-reflect内有一些ServiceLoader的uses没有被自动分析进merged module里，因此造成了一个module * does not declare `uses`的异常。
         * tips: 在additive=true时，不必携带全部DSL，jlink命令的:createMergedModule阶段仍会报warn，但不会影响构建。
         */
        uses 'kotlin.reflect.jvm.internal.impl.resolve.ExternalOverridabilityCondition'
        uses 'kotlin.reflect.jvm.internal.impl.util.ModuleVisibilityHelper'
        uses 'kotlin.reflect.jvm.internal.impl.builtins.BuiltInsLoader'
    }
}